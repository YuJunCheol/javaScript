WAS(Web Application Server)

WAS가 등장하게 된 배경 {

클라이언트 / 서버 구조

DBMA(databases management system) : DB관리 시스템.
- 이전에는 File에 대이터를 저장하고 그것을 읽어들이는 과정을 해야했음.
- 최초 구현 (오라클)
- DBMS가 등장하며 데이터 저장이 수월해짐.
- DBMS는 보통 서버가 제공을 해주며 클라이언트는 DBMS에 접속하는 코드가 필요함, 또 프로그램 로직이 변경되면 클라이언트가 변경되어야하는 문제가 발생, 보안도 좋지 않음.
- 미들웨어 : 클라이언트와 DBMS 사이에 있는 서비스.
클라이언트는 요청만 미들웨어로 보내고 미들웨어에서 대부분의 로직승 수행한다. 미들웨어는 DBMS에 요청후 받아 클라이언트에 제공
클라이언트의 경량화.
프로그램 로직 변경시 미들웨어만 변경하면 됨.

}

최초의 웹은 정적이였지만 사용자의 요구가 늘어나면서 동적기능 요구

동적인 기능 -> 프로그래밍(CGI;웹서버에서 프로그램기능이 들어가는것) 으로 해결

점점 기능 요구가 많아지면서 CGI로 대체 불가능.

브라우저와 DBMS 사이의 미들웨어가 필요해짐



WAS 탄생.

- WAS의 주요 기능 : 프로그램 실행환경 제공, DB 접속 기능 제공, 여러개의 트랜잭션을 관리, 엄부를 처리하는 비즈니스 로직 실행.

이외의 다양한 기능 제공 (웹 서버 기능제공)

현업에서 웹 서버는 정적인 컨텐츠를 웹브라우저에 제공

WAS 는 프로그램의 동적인 결과를 웹 브라우저에 제공

Apache 와 Tomcat를 같이 설치하여 사용하였지만 WAS의 웹서버 제공 기능이 늘어남에 따라 상대적으로 사용하지 않음

하지만 웹 서버는 상대적으로 WAS보다 간단하여 현업에서는 같이 사용.

이유 ) WAS에 문제가 생겼을 때 웹서버에서 WAS의 사용을 중단하고 WAS 조치 후 다시 연결 (장애극복 기능)

                    **********************정리***************************
초기 프로그램은 파일을 통해서 DB를 구현
->
DBMS의 탄생 이후 DB의 접근이 쉬워졌지만 클라이언트에 DBMS접근 기능이 필요해짐에 따라 무거워짐

이를 해결하기위해 미들웨어 등장

클라이언트 ->(요청) -> 미들웨어(로직수행, 요청) -> 서버(DB) ->(제공) -> 미들웨어(결과 전송) -> 클라이언트(사용)

최초의 웹브라우저는 정적인 기능만 제공했지만 동적인 기능 요구에 따라 프로그래밍(CGI)기능을 추가, 
점점 더 복잡해지는 웹,
 DBMS와의 복잡한 프로그래밍 기능에 따라 브라우저(Client)와 DBMS사이의 미들웨어(WAS) 필요해짐.
